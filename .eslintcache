[{"J:\\NAT-Develop\\NodeJS\\line-notification\\app.js":"1","J:\\NAT-Develop\\NodeJS\\line-notification\\controllers\\line.js":"2","J:\\NAT-Develop\\NodeJS\\line-notification\\controllers\\routes.js":"3","J:\\NAT-Develop\\NodeJS\\line-notification\\helpers\\logger.js":"4","J:\\NAT-Develop\\NodeJS\\line-notification\\service\\lineService.js":"5"},{"size":750,"mtime":1599153789144,"results":"6","hashOfConfig":"7"},{"size":1100,"mtime":1599154378947,"results":"8","hashOfConfig":"7"},{"size":188,"mtime":1599153789144,"results":"9","hashOfConfig":"7"},{"size":2149,"mtime":1599154198377,"results":"10","hashOfConfig":"7"},{"size":1113,"mtime":1599241602191,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"14"},"1wtwus1",{"filePath":"15","messages":"16","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"17"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"20","messages":"21","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"22"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"J:\\NAT-Develop\\NodeJS\\line-notification\\app.js",["25"],"const restify = require('restify'),\r\n  Logger = require('./helpers/logger'),\r\n  server = restify.createServer();\r\n\r\nserver.use(restify.plugins.acceptParser(server.acceptable));\r\nserver.use(restify.plugins.fullResponse());\r\nserver.use(restify.plugins.dateParser());\r\nserver.use(restify.plugins.queryParser());\r\nserver.use(restify.plugins.bodyParser());\r\nserver.use(restify.plugins.requestLogger());\r\n\r\nserver.listen(process.env.PORT, function (err) {\r\n  var host = server.address().address == '::' ? 'localhost' : server.address().address;\r\n  err ? console.log('Restify-API app error:' + err) : console.log('Restify-API app is running @ ' + host + ':' + process.env.PORT);\r\n});\r\n\r\nrequire('./controllers/routes')(server);\r\n\r\nmodule.exports = server;\r\n","J:\\NAT-Develop\\NodeJS\\line-notification\\controllers\\line.js",["26","27","28"],"const Logger = require('../helpers/logger'),\r\n  lineService = require('../service/lineService');\r\n\r\nmodule.exports = (server) => {\r\n  //Find all user data\r\n  server.get('/line/notify', async (req, res, next) => {\r\n    console.log('Line Notify');\r\n    try {\r\n      let notify = await lineService\r\n        .POST()\r\n        .then((notify) => {\r\n          console.log('nppfity ', notify);\r\n          return notify;\r\n        })\r\n        .catch((err) => {\r\n          return err;\r\n        });\r\n\r\n      res.send(notify);\r\n    } catch (err) {\r\n      console.log('err ', err);\r\n      res.send('ERROR ', err);\r\n    }\r\n  });\r\n\r\n  server.post('/line/notify', async (req, res, next) => {\r\n    console.log('Line Notify ',req.body);\r\n    try {\r\n      let notify = await lineService\r\n        .POST(req.body)\r\n        .then((notify) => {\r\n          // console.log('nppfity ', notify);\r\n          return notify;\r\n        })\r\n        .catch((err) => {\r\n          return err;\r\n        });\r\n\r\n      res.send(notify);\r\n    } catch (err) {\r\n      console.log('err ', err);\r\n      res.send('ERROR ', err);\r\n    }\r\n  });\r\n};\r\n","J:\\NAT-Develop\\NodeJS\\line-notification\\controllers\\routes.js",[],"J:\\NAT-Develop\\NodeJS\\line-notification\\helpers\\logger.js",["29","30","31"],"/**\r\n * Create a log file and format for the REST API called.It contains debug, success, error message with datetime \r\n *  1- UTC Date and Time\r\n    2- Type of the log (eg: Info, Debug, Error)\r\n    3- The file the log belongs to\r\n    4- The event that occurred\r\n    5- Additional data of an event\r\n    6. Log data (data used to distinguish or group events that occurred for a particular request)\r\n */\r\nconst { format, transports } = require('winston'),\r\n  winston = require('winston'),\r\n  pjson = require('../package.json'),\r\n  dateFormat = () => {\r\n    return new Date(Date.now()).toLocaleString();\r\n  };\r\n\r\nclass LoggerService {\r\n  constructor(route) {\r\n    this.logData = null;\r\n    this.route = route;\r\n    const logger = winston.createLogger({\r\n      transports: [\r\n        // new winston.transports.Console(),\r\n        new winston.transports.File({\r\n          filename: `./logs/${route}.log`,\r\n          prettyPrint: true,\r\n          json: true,\r\n        }),\r\n      ],\r\n      format: winston.format.combine(\r\n        winston.format.printf((info) => {\r\n          let message = `${dateFormat()} | ${info.level.toUpperCase().normalize()} | [ ${route}.log ] | ${info.message} | `;\r\n          message = this.logData ? message + `requestData:${JSON.stringify(this.logData)} ` : message;\r\n          return message;\r\n        })\r\n      ),\r\n    });\r\n    this.logger = logger;\r\n  }\r\n\r\n  setLogData(log_data) {\r\n    this.logData = log_data;\r\n  }\r\n  async info(message) {\r\n    this.logger.log('info', message);\r\n  }\r\n\r\n  // eslint-disable-next-line no-dupe-class-members\r\n  async info(message, obj) {\r\n    this.logger.log('info', message, {\r\n      obj,\r\n    });\r\n  }\r\n\r\n  async debug(message) {\r\n    this.logger.log('debug', message);\r\n  }\r\n\r\n  // eslint-disable-next-line no-dupe-class-members\r\n  async debug(message, obj) {\r\n    this.logger.log('debug', message, {\r\n      obj,\r\n    });\r\n  }\r\n\r\n  async error(message) {\r\n    this.logger.log('error', message);\r\n  }\r\n\r\n  // eslint-disable-next-line no-dupe-class-members\r\n  async error(message, obj) {\r\n    this.logger.log('error', message, {\r\n      obj,\r\n    });\r\n  }\r\n}\r\nmodule.exports = LoggerService;\r\n","J:\\NAT-Develop\\NodeJS\\line-notification\\service\\lineService.js",[],{"ruleId":"32","severity":1,"message":"33","line":2,"column":3,"nodeType":"34","messageId":"35","endLine":2,"endColumn":9},{"ruleId":"32","severity":1,"message":"33","line":1,"column":7,"nodeType":"34","messageId":"35","endLine":1,"endColumn":13},{"ruleId":"32","severity":1,"message":"36","line":6,"column":47,"nodeType":"34","messageId":"35","endLine":6,"endColumn":51},{"ruleId":"32","severity":1,"message":"36","line":26,"column":48,"nodeType":"34","messageId":"35","endLine":26,"endColumn":52},{"ruleId":"32","severity":1,"message":"37","line":10,"column":9,"nodeType":"34","messageId":"35","endLine":10,"endColumn":15},{"ruleId":"32","severity":1,"message":"38","line":10,"column":17,"nodeType":"34","messageId":"35","endLine":10,"endColumn":27},{"ruleId":"32","severity":1,"message":"39","line":12,"column":3,"nodeType":"34","messageId":"35","endLine":12,"endColumn":8},"no-unused-vars","'Logger' is assigned a value but never used.","Identifier","unusedVar","'next' is defined but never used.","'format' is assigned a value but never used.","'transports' is assigned a value but never used.","'pjson' is assigned a value but never used."]